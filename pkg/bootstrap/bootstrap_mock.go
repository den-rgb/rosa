// Code generated by MockGen. DO NOT EDIT.
// Source: bootstrap.go

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBootstrapService is a mock of BootstrapService interface.
type MockBootstrapService struct {
	ctrl     *gomock.Controller
	recorder *MockBootstrapServiceMockRecorder
}

// MockBootstrapServiceMockRecorder is the mock recorder for MockBootstrapService.
type MockBootstrapServiceMockRecorder struct {
	mock *MockBootstrapService
}

// NewMockBootstrapService creates a new mock instance.
func NewMockBootstrapService(ctrl *gomock.Controller) *MockBootstrapService {
	mock := &MockBootstrapService{ctrl: ctrl}
	mock.recorder = &MockBootstrapServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBootstrapService) EXPECT() *MockBootstrapServiceMockRecorder {
	return m.recorder
}

// CreateStack mocks base method.
func (m *MockBootstrapService) CreateStack(templateFile string, params, tags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", templateFile, params, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockBootstrapServiceMockRecorder) CreateStack(templateFile, params, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockBootstrapService)(nil).CreateStack), templateFile, params, tags)
}
